# syntax=registry-cn-hangzhou.ack.aliyuncs.com/dev/dockerfile:1.6
FROM --platform=$BUILDPLATFORM registry-cn-hangzhou.ack.aliyuncs.com/dev/golang:1.22.9 as build
WORKDIR /go/src/github.com/kubernetes-sigs/alibaba-cloud-csi-driver
ARG TARGETARCH
ARG TARGETOS
ARG CSI_VERSION=unknown
ARG GO_BUILD_ARGS
RUN --mount=type=bind,target=. \
    --mount=type=cache,target=/root/.cache/go-build \
    export GOOS=$TARGETOS && \
    export GOARCH=$TARGETARCH && \
    export CGO_ENABLED=0 && \
    go build ${GO_BUILD_ARGS} -trimpath \
        -ldflags "-X github.com/kubernetes-sigs/alibaba-cloud-csi-driver/pkg/version.VERSION=${CSI_VERSION}" \
        -o /out/plugin.csi.alibabacloud.com && \
    go build -trimpath -o /out/csiplugin-connector ./build/lib/csiplugin-connector.go

FROM registry-cn-hangzhou.ack.aliyuncs.com/dev/ack-base/distroless/base-debian12:latest@sha256:23878c981cb4409b6dd701563d2c1226dd69423d74a95acf56e671382523d0b0 as distroless-base
LABEL maintainers="Alibaba Cloud Authors" description="Alibaba Cloud CSI Plugin"

FROM distroless-base as csi-controller
COPY --link --from=build /out/plugin.csi.alibabacloud.com /usr/bin/plugin.csi.alibabacloud.com
ENTRYPOINT ["/usr/bin/plugin.csi.alibabacloud.com"]

FROM registry-cn-hangzhou.ack.aliyuncs.com/dev/debian:bookworm-20241202-slim as debian

ARG TARGETARCH
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-$TARGETARCH \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-$TARGETARCH \
    rm -f /etc/apt/apt.conf.d/docker-clean && \
    echo 'Acquire::Check-Valid-Until false;' > /etc/apt/apt.conf.d/snapshot && \
    sed -i '/^URIs:/d; s|^# \(http://snapshot.debian.org/\)|URIs: \1|' /etc/apt/sources.list.d/debian.sources && \
    apt-get update && \
    apt-get install -y nfs-common e2fsprogs xfsprogs pciutils fdisk lsof

RUN --mount=type=bind,from=distroless-base,target=/base \
    --mount=type=bind,source=build/gather-node-deps.sh,target=/deps.sh \
    /deps.sh

# For ./hack/update-base-image-deps.sh
FROM distroless-base as dep-list
COPY --link --from=debian /staging-node /

FROM --platform=$BUILDPLATFORM registry-cn-hangzhou.ack.aliyuncs.com/dev/debian:bookworm-20241202-slim as build-0
ARG BUILDARCH
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-$BUILDARCH \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-$BUILDARCH \
    rm -f /etc/apt/apt.conf.d/docker-clean && \
    echo 'Acquire::Check-Valid-Until false;' > /etc/apt/apt.conf.d/snapshot && \
    sed -i '/^URIs:/d; s|^# \(http://snapshot.debian.org/\)|URIs: \1|' /etc/apt/sources.list.d/debian.sources && \
    apt-get update && \
    apt-get install -y tar xz-utils make diffutils

FROM build-0 as build-util-linux-amd64
ENV HOST=x86_64-linux-gnu

FROM build-0 as build-util-linux-arm64
ENV HOST=aarch64-linux-gnu

FROM build-util-linux-$TARGETARCH as build-util-linux
ARG BUILDARCH
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=apt-cache-$BUILDARCH \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=apt-lib-$BUILDARCH <<EOF
#!/bin/bash
apt-get update && apt-get install -y gcc-${HOST//_/-}
EOF

ADD --link --checksum=sha256:59e676aa53ccb44b6c39f0ffe01a8fa274891c91bef1474752fad92461def24f \
    https://www.kernel.org/pub/linux/utils/util-linux/v2.40/util-linux-2.40.1.tar.xz /src.tar.xz
RUN mkdir -p /src && tar -C /src --strip-components=1 -xf /src.tar.xz

RUN <<EOF
set -e
cd /src
SOURCE_DATE_EPOCH=$(stat -c %Y /src.tar.xz)
export SOURCE_DATE_EPOCH
echo "util-linux released at $(date --date "@$SOURCE_DATE_EPOCH" --iso-8601=seconds)"
./configure --disable-all-programs --enable-blkid --enable-libblkid --prefix=/usr/local \
    --disable-nls --disable-bash-completion --disable-asciidoc --disable-dependency-tracking --disable-static --host=$HOST
make -j
make install-strip DESTDIR=/out
cd /out/usr/local && rm -r include share lib/pkgconfig
EOF

COPY <<"EOT" /out/usr/local/share/sbom/blkid.spdx.json
{
    "spdxVersion": "SPDX-2.3",
    "SPDXID": "SPDXRef-DOCUMENT",
    "name": "util-linux-2.40.1",
    "packages": [
        {
            "name": "util-linux",
            "SPDXID": "SPDXRef-Package-source-util-linux",
            "versionInfo": "2.40.1",
            "filesAnalyzed": false,
            "primaryPackagePurpose" : "SOURCE",
            "packageFileName" : "util-linux-2.40.1.tar.xz",
            "downloadLocation" : "https://www.kernel.org/pub/linux/utils/util-linux/v2.40/util-linux-2.40.1.tar.xz",
            "checksums" : [{
                "algorithm" : "SHA256",
                "checksumValue" : "59e676aa53ccb44b6c39f0ffe01a8fa274891c91bef1474752fad92461def24f"
            }],
            "releaseDate": "2024-05-06T08:42:01Z",
            "externalRefs": [
                {
                    "referenceCategory": "SECURITY",
                    "referenceType": "cpe23Type",
                    "referenceLocator": "cpe:2.3:a:util-linux:util-linux:2.40.1:*:*:*:*:*:*:*"
                }
            ]
        }
    ]
}
EOT

RUN find /out -exec touch --reference=/src.tar.xz {} +

FROM scratch as download-amd64
ADD --link --checksum=sha256:8b38463661bfac05b9e99ed87285c076fc6f142aedd2b56e555087271afe8109 \ 
    https://aliyun-alinas-eac.oss-cn-beijing.aliyuncs.com/alinas-efc-1.6-20241028201622.a31063.release.x86_64.rpm /
ADD --link --checksum=sha256:1cb314ab0f26bc2c0b31eda078338eed1674126aa66e32930a6d30520d6968f6 \
    https://aliyun-alinas-eac-cn-wulanchabu.oss-cn-wulanchabu.aliyuncs.com/aliyun-alinas-utils-public.noarch.rpm /
ADD --link --checksum=sha256:93233542f8b511de5ae6c976251c2a660a9b7ba6bf8ff7b3e4f48e297ed47db3 \
    https://aliyun-alinas-eac-cn-wulanchabu.oss-cn-wulanchabu.aliyuncs.com/aliyun-alinas-utils-public.noarch.deb /

FROM scratch as download-arm64
# nothing to download

FROM download-$TARGETARCH as download

FROM registry-cn-hangzhou.ack.aliyuncs.com/dev/busybox:1@sha256:0723be2745f64a2f9dc38288959c3080cb1f0d11495c17dff7a65cc41407d79a as init

ARG TARGETARCH
WORKDIR /root
RUN --mount=type=bind,source=build/lib,target=/csi-lib \
    cp /csi-lib/init.sh /init.sh && \
    cp /csi-lib/freezefs.sh /freezefs.sh && \
    mkdir /csi && \
    cp /csi-lib/csiplugin-connector.service /csi/csiplugin-connector.service
COPY --link --from=build /out/csiplugin-connector /csi/csiplugin-connector
COPY --link --from=download / /root
ENTRYPOINT ["/init.sh"]

FROM csi-controller
COPY --link --from=build-util-linux /out /
COPY --link --from=debian /staging-node /
